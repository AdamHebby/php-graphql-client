<?php
/**
 * Created by PhpStorm.
 * User: mostafa
 * Date: 1/18/19
 * Time: 12:47 AM
 */

namespace GraphQL\SchemaObject;

use GraphQL\Query;

/**
 * An abstract class that acts as the base for all schema query objects generated by the SchemaScanner
 *
 * Class QueryObject
 *
 * @package GraphQL\SchemaObject
 */
abstract class QueryObject
{
    /**
     * This constant stores the name of the object name in the API definition
     *
     * @var string
     */
    const OBJECT_NAME = '';

    /**
     * This string attribute stores the name alias to be used in queries for this object
     *
     * @var
     */
    private $nameAlias;

    /**
     * This array stores the set of selected fields' names for this object
     *
     * @var array
     */
    private $selectionSet;

    /**
     * This array stores a map of argument name to argument value for this object
     *
     * @var array
     */
    private $arguments;

    /**
     * @var int
     */
    protected $first;

    /**
     * @var int
     */
    protected $offset;

    /**
     * SchemaObject constructor.
     *
     * @param string $nameAlias
     */
    public function __construct($nameAlias = '')
    {
        $this->selectionSet = [];
        $this->arguments    = [];
        $this->nameAlias    = !empty($nameAlias) ? $nameAlias : static::OBJECT_NAME;
    }

    /**
	 * @return Query
	 */
	protected function toQuery()
	{
	    // Construct arguments list
        $this->constructArguments();

        // Convert nested query objects to string queries
        foreach ($this->selectionSet as $key => $field) {
            if (!is_string($field) && $field instanceof QueryObject) {
                $this->selectionSet[$key] = $field->toQuery();
            }
        }

        // Create and return query for this object
        $query = new Query($this->nameAlias);
        $query->setArguments($this->arguments);
        $query->setSelectionSet($this->selectionSet);

        return $query;
	}

    /**
     * Constructs the object's arguments list from its attributes
     */
	protected function constructArguments()
    {
        foreach ($this as $name => $value) {
            if (!is_array($value) && !is_object($value) && !empty($value) && $name !== 'nameAlias') {
                $this->arguments[$name] = $value;
            }
        }
    }

    /**
     * @param $selectedField
     */
	protected function selectField($selectedField)
    {
        // TODO: Throw exception if field is not a query object or a string
        $this->selectionSet[] = $selectedField;
    }

    /**
     * @param int $firstObjects
     *
     * @return $this
     */
    public function setFirst($firstObjects)
    {
        $this->first = $firstObjects;

        return $this;
    }

    /**
     * @param int $offsetObjects
     *
     * @return $this
     */
    public function setOffset($offsetObjects)
    {
        $this->offset = $offsetObjects;

        return $this;
    }

    /**
     * @return string
     */
    public function __toString()
    {
        return (string) $this->toQuery();
    }
}